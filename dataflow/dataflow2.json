{
	"name": "dataflow2",
	"properties": {
		"folder": {
			"name": "FULLSTACK"
		},
		"type": "MappingDataFlow",
		"typeProperties": {
			"sources": [
				{
					"dataset": {
						"referenceName": "DS_db_exam_results",
						"type": "DatasetReference"
					},
					"name": "examresults"
				},
				{
					"dataset": {
						"referenceName": "DS_db_exams",
						"type": "DatasetReference"
					},
					"name": "exams"
				},
				{
					"dataset": {
						"referenceName": "DS_db_users",
						"type": "DatasetReference"
					},
					"name": "users"
				}
			],
			"sinks": [
				{
					"dataset": {
						"referenceName": "DS_postgres_transformed",
						"type": "DatasetReference"
					},
					"name": "sink1"
				}
			],
			"transformations": [
				{
					"name": "join1"
				},
				{
					"name": "join2"
				},
				{
					"name": "select1"
				},
				{
					"name": "aggregate1"
				},
				{
					"name": "join3"
				},
				{
					"name": "select2"
				},
				{
					"name": "window1"
				},
				{
					"name": "AlterRow1"
				}
			],
			"scriptLines": [
				"source(output(",
				"          id as integer,",
				"          userId as integer,",
				"          examId as integer,",
				"          score as integer",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     isolationLevel: 'READ_UNCOMMITTED',",
				"     format: 'table') ~> examresults",
				"source(output(",
				"          id as integer,",
				"          title as string,",
				"          description as string,",
				"          completed as boolean",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     isolationLevel: 'READ_UNCOMMITTED',",
				"     format: 'table') ~> exams",
				"source(output(",
				"          id as integer,",
				"          email as string,",
				"          password as string,",
				"          role as string,",
				"          name as string",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     isolationLevel: 'READ_UNCOMMITTED',",
				"     format: 'table') ~> users",
				"users, examresults join(users@id == userId,",
				"     joinType:'inner',",
				"     matchType:'exact',",
				"     ignoreSpaces: false,",
				"     broadcast: 'auto')~> join1",
				"join1, exams join(examId == exams@id,",
				"     joinType:'inner',",
				"     matchType:'exact',",
				"     ignoreSpaces: false,",
				"     broadcast: 'auto')~> join2",
				"join2 select(mapColumn(",
				"          id = users@id,",
				"          name,",
				"          examid = examId,",
				"          title,",
				"          score",
				"     ),",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> select1",
				"select1 aggregate(groupBy(examid,",
				"          title),",
				"     MaxScore = max(score)) ~> aggregate1",
				"aggregate1, select1 join(aggregate1@examid == select1@examid",
				"     && MaxScore == score,",
				"     joinType:'inner',",
				"     matchType:'exact',",
				"     ignoreSpaces: false,",
				"     broadcast: 'auto')~> join3",
				"join3 select(mapColumn(",
				"          examid = aggregate1@examid,",
				"          title = aggregate1@title,",
				"          MaxScore,",
				"          UserId = id,",
				"          name,",
				"          title = select1@title",
				"     ),",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> select2",
				"select2 window(asc(MaxScore, true),",
				"     unique_id = rowNumber()) ~> window1",
				"window1 alterRow(insertIf(isNull(unique_id)\r",
				"),",
				"     upsertIf(!isNull(unique_id)\r",
				")) ~> AlterRow1",
				"AlterRow1 sink(allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     deletable:false,",
				"     insertable:true,",
				"     updateable:false,",
				"     upsertable:true,",
				"     keys:['unique_id'],",
				"     format: 'table',",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true,",
				"     errorHandlingOption: 'stopOnFirstError') ~> sink1"
			]
		}
	}
}