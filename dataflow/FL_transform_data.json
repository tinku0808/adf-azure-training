{
	"name": "FL_transform_data",
	"properties": {
		"type": "MappingDataFlow",
		"typeProperties": {
			"sources": [
				{
					"dataset": {
						"referenceName": "DS_des_custormer",
						"type": "DatasetReference"
					},
					"name": "customer"
				},
				{
					"dataset": {
						"referenceName": "DS_des_order",
						"type": "DatasetReference"
					},
					"name": "order"
				}
			],
			"sinks": [
				{
					"dataset": {
						"referenceName": "DS_des_transformed_data",
						"type": "DatasetReference"
					},
					"name": "sink1"
				}
			],
			"transformations": [
				{
					"name": "join1order",
					"description": "joining the customer and order table"
				},
				{
					"name": "aggregate1"
				}
			],
			"scriptLines": [
				"source(output(",
				"          CustomerID as string,",
				"          FirstName as string,",
				"          LastName as string,",
				"          Email as string,",
				"          PhoneNumber as string,",
				"          Address as string,",
				"          City as string,",
				"          State as string,",
				"          ZipCode as string,",
				"          Country as string",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     ignoreNoFilesFound: false) ~> customer",
				"source(output(",
				"          OrderID as short,",
				"          ProductID as string,",
				"          ProductName as string,",
				"          Quantity as integer,",
				"          OrderTimestamp as string,",
				"          Price as double,",
				"          CustomerID as string",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     ignoreNoFilesFound: false) ~> order",
				"customer, order join(customer@CustomerID == order@CustomerID,",
				"     joinType:'inner',",
				"     matchType:'exact',",
				"     ignoreSpaces: false,",
				"     broadcast: 'auto')~> join1order",
				"join1order aggregate(groupBy(customer@CustomerID,",
				"          FirstName,",
				"          Email),",
				"     {Total-products} = collect(ProductName)) ~> aggregate1",
				"aggregate1 sink(allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> sink1"
			]
		}
	}
}